import ROOT as root
import numpy as np
from ROOT import TFile, TCanvas, TPad, TColor
from ROOT import kBlack, kBlue, kRed, kGreen
from ROOT import TH1, TH1F,TLegend
from ROOT import TH2, TH2F


def _drawATLASLabel(x, y, text, doNDC = True, fontsize = 0.07):
    _drawText(x, y, "ATLAS", fontsize = fontsize, font = 72, doNDC = doNDC, alignment = 11)
    _drawText(x + 0.1, y, text, fontsize = fontsize, font = 42, doNDC = doNDC, alignment = 11)

def _drawText(x, y, text, color = kBlack, fontsize = 0.05, font = 42, doNDC = True, alignment = 12):
    tex = root.TLatex()
    if doNDC:
        tex.SetNDC()
    root.SetOwnership(tex, False)
    tex.SetTextAlign(alignment)
    tex.SetTextSize(fontsize)
    tex.SetTextFont(font)
    tex.SetTextColor(color)
    tex.DrawLatex(x, y, text)

def createCanvasPads():

    canv = TCanvas("canv_ratio_plot", "canv", 10, 10, 2400, 1450)
    root.SetOwnership(canv, False)


    canv.SetRightMargin(0.15)
    canv.SetTopMargin(0.15)
    canv.SetBottomMargin(0.15)
    canv.SetLeftMargin(0.15)


    pad1 = TPad("pad1", "pad1", 0, 0, 1, 1.0)
    pad1.SetRightMargin(0.15)
    pad1.SetTopMargin(0.1)
    pad1.SetLeftMargin(0.15)
    pad1.SetBottomMargin(0.1)

    pad1.SetFillColor(root.kWhite)
    pad1.SetFrameFillStyle(0)
    canv.cd()
    pad1.Draw()


    return canv, pad1

def uncs(outPath, Type):
    # Set the ATLAS Style
    # aplt.set_atlas_style()

    # Create a figure and axes
    # fig, ax = aplt.subplots(1, 1, name="fig1", figsize=(800, 600))

    # Randomly fill a 2D histogram
    # cav = TCanvas("","",10,10,2400,2200)
    # pad = TPad("","",0.1,0.1,0.9,0.9)
    # pad
    initial = [2.77956E-05, 9.18632E-05, 0.000293832, 0.00122626, 6.23563E-05, 0.000266847, 0.000719646, 0.00257103, 0.000145766, 0.000593666, 0.00190437, 0.00597857, 0.000279288, 0.000928315, 0.00305011, 0.0106833, 0.000512649, 0.00144844, 0.00487751, 0.0156174, 0.0010072, 0.00568093, 0.0161041, 0.0400924] #intial 91+10
    

    initial_err = [3.73267E-06, 1.02802E-05, 3.80722E-05, 0.000152155, 3.13463E-06, 2.37791E-05, 0.000182927, 0.000169867, 8.35917E-06, 4.10496E-05, 7.8764E-05, 0.00044802, 2.64194E-05, 8.87423E-05, 0.000314245, 0.000650364, 1.67966E-05, 5.88483E-05, 0.000229615, 0.000606669, 3.33957E-05, 0.000363123, 0.000758974, 0.00342056]

    bw = [4.02612E-05, 0.000120388, 0.000347194, 0.00132347, 7.3542E-05, 0.000282824, 0.000778923, 0.00281347, 0.000154639, 0.000625872, 0.00192782, 0.00603786, 0.000311132, 0.00100242, 0.00309482, 0.0102888, 0.000543691, 0.00155772, 0.00497516, 0.0158106, 0.0010541, 0.00569056, 0.015626, 0.0413519] #3 sigma BW

    bw_err = [4.72247E-06, 1.25356E-05, 2.82976E-05, 8.83283E-05, 5.90073E-06, 1.74598E-05, 7.08379E-05, 0.000163445, 1.05191E-05, 4.70753E-05, 0.000127092, 0.000468457, 1.99548E-05, 7.09369E-05, 0.000241699, 0.000608859, 4.15377E-06, 5.65753E-05, 0.000140252, 0.000588034, 4.1028E-05, 0.000188804, 0.000805984, 0.00267722] #3 sigma bw error

    bw_sigma2 =[3.3447E-05, 0.000102218, 0.000302609, 0.00128252, 6.94749E-05, 0.000275807, 0.000738401, 0.00271407, 0.000146621, 0.000607518, 0.00194558, 0.00612981, 0.000295325, 0.000951644, 0.00305973, 0.010952, 0.000546632, 0.00147883, 0.00501401, 0.0161612, 0.00104932, 0.00586099, 0.0165123, 0.0391828]

    s2_err_bw = [2.11207E-07, 8.14423E-07, 2.46321E-06, 6.46642E-06, 3.69794E-07, 1.77276E-06, 5.03471E-06, 1.08291E-05, 1.4E-06, 3.67117E-06, 1.02005E-05, 2.70881E-05, 1.60507E-06, 4.03686E-061, .76246E-05, 3.71283E-05, 1.69689E-06, 1.03172E-05, 8.46863E-06, 0.00010648, 1.9889E-06, 0.000260639, 5.51562E-05, 0.000164472]

    bw_sigma4 = [4.40728E-05, 0.000119373, 0.000360996, 0.0013677, 8.6988E-05, 0.000283872, 0.0007929, 0.00282845, 0.000172512, 0.000646759, 0.00194257, 0.00612243, 0.000348031, 0.00102347, 0.00323065, 0.0104057, 0.000557384, 0.0016087, 0.00498309, 0.0160015, 0.00110113, 0.00558765, 0.0153383, 0.0411622]

    s4_err_bw = [3.80526E-06, 1.19148E-05, 4.04042E-05, 9.20568E-05, 4.60477E-06, 1.80728E-05, 5.53099E-05, 0.000197717, 9.5801E-06, 5.08874E-05, 0.000128907, 0.000307564, 2.54054E-05, 8.26319E-05, 0.000454215, 0.00076925, 2.98529E-05, 4.77966E-05, 0.000219887, 0.000459219, 4.27844E-05, 0.000385815, 0.000955765, 0.00274624]

    bw_gauss = [3.36064E-05, 0.000105937, 0.000299397, 0.00126576, 7.10368E-05, 0.00027268, 0.000737339, 0.00272032, 0.00014522, 0.000602727, 0.00193299, 0.00606077, 0.000286898, 0.000947173, 0.003027, 0.010872, 0.000545306, 0.00148787, 0.00495277, 0.0157645, 0.00103669, 0.00582632, 0.0162814, 0.0402141]# 3sigma ,gauss fit

    #bin60 60_90_130
    
    bin60_sigma3 = [4.02475E-05, 0.000120225, 0.000348073, 0.00132747, 7.36662E-05, 0.000283188, 0.000776605, 0.002805, 0.000154736, 0.000625357, 0.00192708, 0.00605875, 0.000310803, 0.00100118, 0.00308751, 0.0102897, 0.000543415, 0.00155557, 0.00496101, 0.0158089, 0.00105366, 0.005681, 0.0156513, 0.0413639]
    bin60_sigma4 = [4.38548E-05, 0.000119611, 0.000362226, 0.00136687, 8.75868E-05, 0.000284814, 0.00079309, 0.00284304, 0.000172475, 0.000647994, 0.00194806, 0.00610096, 0.000348415, 0.00102142, 0.00322987, 0.0104283, 0.0005572, 0.00160706, 0.004962, 0.0160352, 0.0011009, 0.00563761, 0.0155431, 0.0411349]
    bin60_sigma4_err = [3.42395E-06, 1.16433E-05, 3.75091E-05, 8.70861E-05, 4.36027E-06, 1.89989E-05, 6.13062E-05, 0.000126094, 1.02646E-05, 3.29979E-05, 0.000120984, 0.000398379, 1.97136E-05, 7.49132E-05, 0.000261755, 4.70958E-05, 1.37999E-05, 5.97509E-05, 0.00021206, 0.00066028, 4.61127E-05, 0.000280962, 0.000950498, 0.00282727]
    bin60_sigma5 = [5.17407E-05, 0.000120178, 0.000364648, 0.00142673, 9.31192E-05, 0.000296185, 0.000821749, 0.00278521, 0.000199643, 0.000655254, 0.00187741, 0.00604648, 0.000379834, 0.00103031, 0.00309896, 0.0104888, 0.000577968, 0.00159438, 0.00494052, 0.0160076, 0.00116852, 0.00550729, 0.0158939, 0.0411522]
    
    #bin40 = 40_60_90_130
    # bin40 = [4.41654E-05, 4.13003E-05, 0.000128252, 0.000352787, 0.00132627, 4.73024E-05, 8.83999E-05, 0.000295687, 0.000792038, 0.00282679, 9.46997E-05, 0.000193965, 0.000644241, 0.00193973, 0.00605357, 0.00026517, 0.000343354, 0.00103373, 0.00313706, 0.0103076, 0.000419093, 0.000670387, 0.0016045, 0.00500559, 0.015828, 0.000638339, 0.00167034, 0.00574065, 0.0156992, 0.0411108]
    # bin40_err = [4.17949E-05, 4.9294E-06, 4.6709E-05, 3.55493E-05, 2.76803E-05, 3.63915E-05, 1.30103E-05, 1.69789E-05, 0.000103279, 0.000182962, 2.31603E-05, 1.52051E-05, 0.000205803, 0.000463932, 0.000567531, 0.000124952, 0.000168864, 0.000255384, 0.000109325, 0.00160428, 0.00012962, 6.54288E-05, 3.91452E-05, 0.000398075, 0.00104341, 7.68608E-05, 0.000346308, 0.00241542, 0.00329967, 0.00228552]
    # bin40_sigma2 = [3.50872E-05, 3.69757E-05, 0.000111879, 0.000306872, 0.00127725, 3.59468E-05, 8.71238E-05, 0.000291522, 0.000757379, 0.00272564, 8.05817E-05, 0.000189035, 0.000630803, 0.00196845, 0.00611962, 0.000223752, 0.000352578, 0.000987511, 0.0031315, 0.01095, 0.000419778, 0.000676025, 0.00153845, 0.00504808, 0.0159207, 0.000618854, 0.00165104, 0.00594669, 0.0165063, 0.0409551]
    # bin40_sigma4 = [6.05383E-05, 4.0307E-05, 0.000121307, 0.000361704, 0.00137889, 7.52982E-05, 9.4492E-05, 0.000284952, 0.00080582, 0.00283637, 0.000131519, 0.000194884, 0.000659239, 0.00195822, 0.00614726, 0.00032826, 0.000351596, 0.00104417, 0.00326925, 0.010439, 0.000441124, 0.000676745, 0.0016519, 0.00499712, 0.0159818, 0.000721644, 0.00168517, 0.00564944, 0.0154981, 0.0415789]



    bin40_sigma3 = [4.41715E-05, 4.13007E-05, 0.000128253, 0.000352788, 0.00132625, 4.72989E-05, 8.83993E-05, 0.000295684, 0.000792042, 0.0028268, 9.46972E-05, 0.000193965, 0.000644237, 0.00193937, 0.00605366, 0.000265166, 0.000343352, 0.00103372, 0.00313685, 0.0103077, 0.000419089, 0.000670384, 0.0016045, 0.00500562, 0.015828, 0.000638335, 0.00167049, 0.00574066, 0.0156989, 0.0411113]
    bin40_sigma4_err = [7.60475E-06, 4.4342E-06, 1.19793E-05, 3.49449E-05, 0.000109486, 8.67119E-06, 7.17748E-06, 1.93022E-05, 6.23493E-05, 0.000184436, 1.45003E-05, 1.2614E-05, 4.08973E-05, 0.000140762, 0.000398739, 1.49736E-05, 2.88945E-05, 8.81344E-05, 0.00026183, 0.00066959, 9.56002E-06, 1.51884E-05, 5.98964E-05, 0.000212163, 0.000660569, 4.88657E-05, 8.6943E-05, 0.000270122, 0.000947386, 0.00418387]
    bin40_sigma4 = [5.99409E-05, 4.01166E-05, 0.000120046, 0.000361494, 0.00136421, 7.57453E-05, 9.3999E-05, 0.000285398, 0.000800498, 0.00283498, 0.000132136, 0.000195921, 0.000656507, 0.00195612, 0.00612457, 0.000326051, 0.000352139, 0.00104218, 0.00325986, 0.0104456, 0.000440247, 0.000676033, 0.00164729, 0.00499103, 0.0160503, 0.000719538, 0.00168813, 0.00567277, 0.0155129, 0.0412356]

    bin40_sigma5 =[7.79023E-05, 4.33438E-05, 0.000114718, 0.000359009, 0.00142897, 9.47575E-05, 9.26252E-05, 0.000290864, 0.000822293, 0.00277965, 0.000182558, 0.000203599, 0.000656961, 0.00188451, 0.0060742, 0.000379463, 0.000360911, 0.00103792, 0.00311496, 0.0104627, 0.000472996, 0.000683294, 0.00162421, 0.00497498, 0.0159987, 0.000817465, 0.00167046, 0.00553597, 0.0160104, 0.0412648]


    bin45_sigma4 = [3.6099E-05, 5.59019E-05, 0.000127039, 0.000367585, 0.00135927, 7.56015E-05, 0.000104377, 0.000293055, 0.00080699, 0.00283104, 0.000133858, 0.000236648, 0.000662638, 0.00195334, 0.0060989, 0.000313983, 0.000399587, 0.00105683, 0.00325777, 0.0104196, 0.000443231, 0.000804649, 0.00164778, 0.00498435, 0.0160316, 0.000768537, 0.00206477, 0.00566177, 0.0154843, 0.0412804]
    bin45_sigma5 = [4.4233E-05, 6.24142E-05, 0.000127304, 0.000369486, 0.00143486, 8.35339E-05, 0.000107758, 0.000303394, 0.000835333, 0.00278871, 0.000174808, 0.000240342, 0.000667762, 0.00189052, 0.00606496, 0.000357508, 0.000410533, 0.00105142, 0.00312453, 0.0104058, 0.000472188, 0.000811001, 0.00162601, 0.00496038, 0.0159806, 0.00086457, 0.00206058, 0.00554649, 0.0159643, 0.0411446]
    bin45_sigma4_err = [5.74038E-06, 6.68076E-06, 1.18398E-05, 3.75468E-05, 0.000109128, 6.88574E-06, 9.9406E-06, 1.91036E-05, 6.23748E-05, 0.00018429, 1.20483E-05, 1.92007E-05, 3.63807E-05, 0.000140514, 0.000397915, 2.11142E-05, 3.72812E-05, 7.53948E-05, 0.000261787, 0.000755152, 1.58309E-05, 3.08806E-05, 5.98823E-05, 0.000212126, 0.000660449, 4.63419E-05, 0.000120005, 0.0002696, 0.000946679, 0.00283577]
    bin45_sigma3 = [3.15351E-05, 5.46403E-05, 0.000129447, 0.000354809, 0.00132674, 5.347E-05, 0.000101176, 0.000296717, 0.00079359, 0.00281628, 0.000108694, 0.000230463, 0.00064431, 0.00194954, 0.00604916, 0.000260467, 0.000400294, 0.00103388, 0.00313096, 0.0102841, 0.0004297, 0.000790019, 0.00159671, 0.00499055, 0.0158087, 0.000714235, 0.00202864, 0.00572425, 0.0156836, 0.0413397]


#bin5 = 45+60_90_130
    bin5 = [3.15892E-05, 5.52362E-05, 0.000130032, 0.000352318, 0.00132356, 5.31886E-05, 0.000101843, 0.000297258, 0.000792673, 0.00282267, 0.000108097, 0.000230009, 0.000644279, 0.00194923, 0.00607394, 0.000260055, 0.000397749, 0.00103593, 0.00314927, 0.0102785, 0.000428761, 0.000788154, 0.00160156, 0.00499668, 0.015797, 0.000715971, 0.0020307, 0.00573371, 0.0156975, 0.0412005]
    bin5_sigma2 = [1.68786E-05, 5.54518E-05, 0.000114617, 0.000312161, 0.00128489, 4.46236E-05, 0.000106538, 0.000293874, 0.000758409, 0.00271605, 9.29015E-05, 0.000236, 0.000631672, 0.00196388, 0.00609434, 0.000231051, 0.000414427, 0.000995321, 0.00311029, 0.0109752, 0.000436342, 0.000799474, 0.00152671, 0.00502701, 0.0159208, 0.000709381, 0.00198375, 0.00593384, 0.0165646, 0.0408067]
    bin5_sigma4 = [3.61271E-05, 5.57199E-05, 0.000127159, 0.000365166, 0.00136742, 7.63367E-05, 0.000104635, 0.00029329, 0.000806222, 0.00283316, 0.000133946, 0.00023407, 0.000662009, 0.00195912, 0.00629667, 0.000315029, 0.000398464, 0.0010487, 0.00325655, 0.010384, 0.00044371, 0.000805628, 0.0016456, 0.0049888, 0.0160439, 0.000767441, 0.0020723, 0.00566623, 0.0155292, 0.0413732]
    bin5_err = [5.19133E-06, 6.33986E-06, 1.17425E-05, 3.68172E-05, 0.000109239, 3.48264E-06, 9.10519E-06, 7.72254E-06, 6.21819E-05, 0.000186163, 1.12553E-05, 1.89593E-05, 4.0543E-05, 0.000141698, 0.000402554, 1.85365E-05, 3.70435E-05, 7.53968E-05, 0.00022452, 0.000656366, 1.57337E-05, 2.36493E-05, 5.97136E-05, 7.21188E-05, 0.000422481, 4.54787E-05, 0.000120261, 0.00027439, 0.000962206, 0.00180443]
    bin5_gauss = [1.67261E-05, 5.52559E-05, 0.000118273, 0.000308924, 0.001269, 4.7421E-05, 0.000107145, 0.000289921, 0.000754687, 0.00272124, 9.2523E-05, 0.00023337, 0.00062535, 0.00194996, 0.00604405, 0.00022246, 0.000404993, 0.000984675, 0.00306502, 0.0108897, 0.000436347, 0.000788854, 0.0015313, 0.0049836, 0.0157959, 0.000706769, 0.0019883, 0.00587862, 0.0162821, 0.040161]

    bin5_sigma25 = [2.38403E-05, 5.1799E-05, 0.000128889, 0.000346327, 0.0013239, 5.42479E-05, 0.000107008, 0.000291464, 0.000767277, 0.00271451, 9.74021E-05, 0.000238342, 0.000650642, 0.00198271, 0.00606891, 0.00023796, 0.000404044, 0.00101978, 0.00307699, 0.010595, 0.000432767, 0.000796916, 0.00156781, 0.00491458, 0.0159461, 0.000713872, 0.00202154, 0.00580661, 0.0157341, 0.0407163]
    bin5_sigma35 = [3.49769E-05, 5.52732E-05, 0.000124488, 0.000368152, 0.00134211, 6.36698E-05, 0.000104741, 0.0002857, 0.000827236, 0.0028408, 0.000123784, 0.000224669, 0.000665016, 0.00192501, 0.00615808, 0.000281924, 0.000418465, 0.00103842, 0.00320383, 0.0104841, 0.00043085, 0.00079553, 0.00162609, 0.0050367, 0.0157607, 0.000749872, 0.0020697, 0.00568789, 0.0155763, 0.0415184]



    bin50 = [3.14601E-05, 6.81195E-05, 0.000126774, 0.000353648, 0.00132585, 6.19051E-05, 0.000114799, 0.00029293, 0.000787933, 0.00281501, 0.000127266, 0.000264157, 0.000639493, 0.00193137, 0.00604756, 0.000274485, 0.000466327, 0.00102778, 0.00310587, 0.0102861, 0.000470925, 0.000893183, 0.0015795, 0.00497875, 0.0158037, 0.00085551, 0.00230276, 0.00570979, 0.0156775, 0.041206]
    bin50_err = [4.25854E-06, 9.1232E-06, 1.1663E-05, 3.69436E-05, 9.41136E-05, 5.43916E-06, 1.28633E-05, 1.91307E-05, 2.63519E-05, 0.000107821, 1.04508E-05, 2.71591E-05, 4.05436E-05, 0.000141393, 0.000401704, 2.01552E-05, 5.37855E-05, 7.54538E-05, 0.000259749, 0.000762489, 1.45463E-05, 3.72943E-05, 5.967E-05, 0.000116046, 0.000220562, 4.53381E-05, 0.000173979, 0.000274503, 0.000962356, 0.00303168]
    bin50_gauss = [2.39362E-05, 6.15116E-05, 0.000112945, 0.00030269, 0.00127114, 5.73671E-05, 0.000122041, 0.000282984, 0.000751686, 0.00272066, 0.000113404, 0.000273262, 0.000614766, 0.00194101, 0.00609423, 0.000246579, 0.000465003, 0.000972863, 0.00304579, 0.0109046, 0.000474211, 0.000898733, 0.00151005, 0.00496344, 0.0157932, 0.000840748, 0.00226299, 0.00585895, 0.016292, 0.0402937]
    bin50_sigma2 =[2.42226E-05, 6.24064E-05, 0.000108331, 0.000309418, 0.001283, 5.46112E-05, 0.000123472, 0.000286532, 0.000753947, 0.00272702, 0.000115408, 0.00027269, 0.000623636, 0.00195022, 0.00609475, 0.000253028, 0.000479494, 0.000981919, 0.0030984, 0.0109255, 0.000474788, 0.000917725, 0.001505, 0.0050232, 0.0159208, 0.000843767, 0.00225835, 0.00592242, 0.0165136, 0.0408671]
    bin50_sigma4 =[3.64547E-05, 6.72004E-05, 0.000125553, 0.000366791, 0.00136555, 8.00934E-05, 0.000116203, 0.000291774, 0.000803495, 0.00282728, 0.000148453, 0.000265221, 0.000659118, 0.00194975, 0.00612299, 0.00031471, 0.000486075, 0.00104713, 0.00324422, 0.0104511, 0.000481003, 0.000928341, 0.00163248, 0.00496793, 0.0160364, 0.000901288, 0.00235209, 0.00564089, 0.0154979, 0.0411953]

    bin70_sigma3 =[3.22999E-05, 6.11721E-05, 0.000227192, 0.000909073, 5.45128E-05, 0.000124778, 0.000480831, 0.00201136, 0.000105132, 0.000273646, 0.00110571, 0.00447957, 0.000263562, 0.000501456, 0.00156266, 0.00778502, 0.000431015, 0.000910359, 0.00252699, 0.011276, 0.000711905, 0.00250193, 0.00907911, 0.0315624]
    bin70_sigma3_err =[5.30966E-06, 6.05479E-06, 1.8714E-05, 6.7704E-05, 6.53908E-06, 8.50668E-06, 3.01297E-05, 0.000117389, 1.12585E-05, 1.79629E-05, 6.6651E-05, 0.000256254, 2.33383E-05, 3.5641E-05, 0.00011533, 0.000492584, 1.58975E-05, 2.90659E-05, 9.13802E-05, 0.000404555, 4.55342E-05, 0.000116239, 0.000443831, 0.00178484]
    bin70_sigma2 =[1.71871E-05, 5.95046E-05, 0.000199661, 0.000861295, 4.60438E-05, 0.000128547, 0.000483309, 0.00190392, 8.96109E-05, 0.000276926, 0.00108771, 0.00455227, 0.000232779, 0.000514812, 0.00148437, 0.00811737, 0.000436836, 0.000897652, 0.00252308, 0.0112472, 0.000705093, 0.00251152, 0.00946229, 0.0319086]
    bin70_sigma4 =[3.57118E-05, 6.4525E-05, 0.000215018, 0.000944594, 7.69832E-05, 0.000129521, 0.000476718, 0.00200027, 0.000132347, 0.000281834, 0.00112603, 0.00451399, 0.000317545, 0.000506374, 0.00160781, 0.00798531, 0.00044556, 0.000932643, 0.00255734, 0.0113794, 0.000763963, 0.00251766, 0.00902789, 0.0317013]
    bin70_sigma4_err= [5.87717E-06, 6.28747E-06, 1.84652E-05, 6.80775E-05, 7.0586E-06, 1.25835E-05, 2.99181E-05, 0.000115829, 2.59691E-05, 1.821E-05, 6.67995E-05, 0.000254384, 2.33383E-05, 5.04267E-05, 0.000115791, 0.000430198, 1.59645E-05, 1.72835E-05, 9.4423E-05, 0.000353964, 4.63832E-05, 0.000115648, 0.000438166, 0.00176766]

    bin70_sigma5 = [4.25697E-05, 7.20531E-05, 0.000215062, 0.000977575, 8.42005E-05, 0.000137207, 0.000483231, 0.00198824, 0.000172577, 0.000295268, 0.00108904, 0.00446176, 0.000360646, 0.0005122, 0.00158542, 0.00791558, 0.00047404, 0.000935808, 0.00251948, 0.011306, 0.000857968, 0.00250566, 0.00896556, 0.0316866]



    # ttw_sigma4 = [5.86651E-06, 9.53953E-05, 0.000654041, 4.35317E-05, 0.000257106, 0.00113462, 9.93481E-05, 0.000615142, 0.00500343, 0.000182026, 0.000893879, 0.0072779, 0.000272419, 0.00120675, 0.0115266, 0.000635482, 0.00573078, 0.0346595]
    # ttw_sigma4_err = [1.82654E-06, 1.00984E-05, 5.22233E-05, 2.15627E-06, 1.23739E-05, 0.000152016, 8.06933E-06, 3.34069E-05, 0.00031327, 1.73813E-05, 7.44734E-05, 0.000664876, 1.05087E-05, 3.89922E-05, 0.000513699, 3.5065E-05, 0.000399645, 0.00393214]
    # ttw_sigma5 = [2.0384E-05, 0.000104772, 0.00071444, 5.35404E-05, 0.000274701, 0.00120578, 0.000131444, 0.000636135, 0.00494979, 0.000211975, 0.000865166, 0.00732097, 0.000300104, 0.00119633, 0.0116233, 0.000687972, 0.00574534, 0.0350558]
    # ttw_sigma3 = [2.36222E-05, 0.00013606, 0.0011871, 4.81985E-05, 0.000315117, 0.0022888, 9.49632E-05, 0.000696725, 0.00538371, 0.00018314, 0.00100421, 0.00778756, 0.00030421, 0.00137283, 0.0121267, 0.000695718, 0.00601181, 0.0332939]


    #eta12 60_90 ttw
    # ttw_sigma4 = [0.00003679, 0.00015136, 0.00079125, 0.00010888, 0.00051923, 0.00265219, 0.00020889, 0.00073158, 0.00381162, 0.00031788, 0.00095021, 0.00545707, 0.00074101, 0.00447185, 0.01760390]
    # ttw_sigma4_err = [0.00001299, 0.00001041, 0.00004222, 0.00006148, 0.00025697, 0.00028624, 0.00007226, 0.00102726, 0.00064585, 0.00005606, 0.00006931, 0.00086481, 0.00006360, 0.00099367, 0.00388065]
    # ttw_sigma3 = [0.00003386, 0.00014979, 0.00076496, 0.00009620, 0.00048517, 0.00265760, 0.00018706, 0.00071493, 0.00369672, 0.00030587, 0.00092885, 0.00541726, 0.00070170, 0.00457554, 0.01750590]
    # ttw_sigma5 = [0.00004187, 0.00015383, 0.00079507, 0.00013672, 0.00052730, 0.00258680, 0.00023130, 0.00071348, 0.00367194, 0.00033105, 0.00091920, 0.00543906, 0.00077416, 0.00432093, 0.01810130]


    #eta12_34 60_90 ttw

    # ttw_sigma4 = [ 0.000037, 0.000152, 0.000791, 0.000140, 0.000587, 0.003009, 0.000319, 0.000950, 0.005482, 0.000743, 0.004480, 0.017623]
    # ttw_sigma4_err = [ 0.000002, 0.000010, 0.000038, 0.000009, 0.000037, 0.000072, 0.000013, 0.000056, 0.000237, 0.000045, 0.000292, 0.001107]
    # ttw_sigma3 = [ 0.000034, 0.000150, 0.000763, 0.000124, 0.000560, 0.002976, 0.000308, 0.000930, 0.005429, 0.000705, 0.004574, 0.017532]
    # ttw_sigma5 = [0.000042, 0.000154, 0.000794, 0.000166, 0.000587, 0.002919, 0.000332, 0.000921, 0.005441, 0.000774, 0.004329, 0.018121]

    ttw_sigma4 = [    0.00003659, 0.00015161, 0.00079051, 0.00014002, 0.00058691, 0.00300867, 0.00031914, 0.00094987, 0.00548185, 0.00074259, 0.00447989, 0.01762330]
    ttw_sigma4_err = [    0.00000235, 0.00001048, 0.00003805, 0.00000907, 0.00003671, 0.00007246, 0.00001261, 0.00005573, 0.00023684, 0.00004468, 0.00029226, 0.00110677]
    ttw_sigma3 = [    0.00003383, 0.00015021, 0.00076297, 0.00012364, 0.00056000, 0.00297604, 0.00030815, 0.00092963, 0.00542918, 0.00070460, 0.00457408, 0.01753220]
    ttw_sigma5 = [    0.00004178, 0.00015378, 0.00079363, 0.00016594, 0.00058695, 0.00291879, 0.00033154, 0.00092090, 0.00544063, 0.00077407, 0.00432892, 0.01812100]

    #eta12_34 60_90 CO
    CO_sigma4 = [0.001215, 0.001314, 0.004840, 0.001981, 0.003571, 0.011867, 0.002401, 0.005643, 0.018352, 0.003946, 0.012267, 0.036884]
    CO_sigma4_err = [0.000078, 0.000207, 0.000532, 0.000113, 0.000614, 0.000778, 0.000110, 0.000345, 0.000925, 0.000263, 0.001291, 0.002906]
    CO_sigma3 = [0.001072, 0.001441, 0.004904, 0.001873, 0.003710, 0.011517, 0.002435, 0.005400, 0.018208, 0.004041, 0.012574, 0.037506]
    CO_sigma5 = [0.001329, 0.001499, 0.004879, 0.002126, 0.003641, 0.011942, 0.002429, 0.005589, 0.018259, 0.004088, 0.012181, 0.037724]
    #eta12_34 60_90 gammastr

    # gammastr_sigma4 =[0.003907, 0.006177, 0.009051, 0.003927, 0.005210, 0.019289, 0.005699, 0.008875, 0.018464, 0.003845, 0.012621, 0.033173]
    # gammastr_sigma4_err =[0.000429, 0.001959, 0.004120, 0.001153, 0.002918, 0.008081, 0.001010, 0.003351, 0.008172, 0.001884, 0.008077, 0.022073]
    # gammastr_sigma3 =[ 0.002986, 0.005914, 0.005439, 0.002425, 0.005497, 0.020355, 0.005832, 0.006335, 0.020967, 0.004452, 0.008287, 0.015737]
    # gammastr_sigma5 =[ 0.004262, 0.007325, 0.005784, 0.004526, 0.003423, 0.015953, 0.006051, 0.007415, 0.017622, 0.007190, 0.008505, 0.032049]


    # gammastr_sigma4 =[3.90E-03, 5.88E-03, 1.24E-02, 5.37E-03, 9.50E-03, 2.10E-02]
    # gammastr_sigma4_err =[4.48E-04, 1.64E-03, 3.78E-03, 8.70E-04, 3.42E-03, 7.82E-03 ]
    # gammastr_sigma3 =[2.86E-03, 5.75E-03, 1.01E-02, 5.56E-03, 6.56E-03, 1.98E-02]
    # gammastr_sigma5 =[4.36E-03, 5.90E-03, 9.42E-03, 6.30E-03, 7.44E-03, 2.03E-02]
    gammastr_sigma4 =[5.02929e-03]
    gammastr_sigma4_err =[3.39856e-04 ]
    gammastr_sigma3 =[4.28177e-03]
    gammastr_sigma5 =[5.37735e-03]

    # CO_sigma4 =[0.00121033, 0.00102281, 0.00161475, 0.00111936, 0.00146746, 0.00901341, 0.00169111, 0.00344815, 0.0104928, 0.00202613, 0.00530173, 0.02968, 0.00227245, 0.00687081, 0.0311676, 0.00378998, 0.0147009, 0.0643698]
    # CO_sigma4_err =[8.41798E-05, 0.000150257, 0.000480565, 0.000122411, 0.000271027, 0.00172389, 0.00013257, 0.000432421, 0.00219899, 0.000229103, 0.000567688, 0.00392001, 0.000108739, 0.00033601, 0.00241847, 0.000308614, 0.000741609, 0.00756404]
    # CO_sigma5 =[0.00135496, 0.00124758, 0.00281957, 0.00126468, 0.0017313, 0.0088691, 0.00185492, 0.00357243, 0.0106224, 0.00223915, 0.00538483, 0.0299425, 0.00233965, 0.00687049, 0.0315008, 0.00394825, 0.0149573, 0.0649412]
    # CO_sigma3 =[0.0010711, 0.00159381, 0.00518073, 0.00107392, 0.00218523, 0.010353, 0.00174015, 0.00407843, 0.013131, 0.0020487, 0.00526759, 0.0285444, 0.00242183, 0.00706989, 0.0316517, 0.00402425, 0.0161558, 0.0606795]


    # infile = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/new_bins/50_60_90_130/data_all_closure.root")
    # infile = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/new_bins/60_130/ttw/data_all_closure_4sigma.root")
    # infile = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/etabins12/60_90/gammastr0/data_all_closure_4sigma.root")
    # infile = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/approved_binning/gammastr/MC_all_closure_4sigma.root")
    # infile2 = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/60_90_130/mc16d2_closure_4sigma.root")
    # infile3 = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/60_90_130/mc16e2_closure_4sigma.root")
    infile = TFile("/afs/cern.ch/work/s/ssindhu/private/qmisid_calc/60_90_130/MC/truth_mc_closure_4sigma.root")                                                                                                                                                
    output= TFile(outPath+"QmisiD_total_uncs.root","recreate") 
    pT_bins = 4
    eta_bins = 6

    pTBins=np.array([15,60,90,130,1000], dtype='float64')
    etaBins=np.array([0,0.6,1.1,1.51,1.7,2.3,2.5], dtype='float64')
    # pTBins=np.array([15,60,90,1000], dtype='float64')
    # etaBins=np.array([0,1.1,1.7,2.3,2.5], dtype='float64')
    outhist = TH2F("QmisID_rate_and_uncertainty","QmisID_rate_and_uncertainty",eta_bins, etaBins,pT_bins, pTBins)
    h1_dummy = TH1F("","",eta_bins, etaBins)
    h2_dummy = TH1F("","",pT_bins, pTBins)
    h1_dummy.SetStats(0)
    h2_dummy.SetStats(0)
    h1_dummy.GetXaxis().SetTitle("electron |#eta|")
    h1_dummy.GetYaxis().SetTitle("charge mis ID rate")
    h1_dummy.GetYaxis().SetRangeUser(1e-5,0.5)
    
    h2_dummy.GetXaxis().SetTitle("electron p_{T} [GeV]")
    h2_dummy.GetYaxis().SetTitle("charge mis ID rate")
    h2_dummy.GetYaxis().SetRangeUser(1e-5,0.5)
    h1_pT1 = h1_dummy.Clone("h1_pT1")
    h1_pT2 = h1_dummy.Clone("h1_pT2")
    h1_pT3 = h1_dummy.Clone("h1_pT3")
    h1_pT4 = h1_dummy.Clone("h1_pT4")
    h1_pT5 = h1_dummy.Clone("h1_pT5")
    
    h2_eta1 = h2_dummy.Clone("h1_eta1")
    h2_eta2 = h2_dummy.Clone("h1_eta2")
    h2_eta3 = h2_dummy.Clone("h1_eta3")
    h2_eta4 = h2_dummy.Clone("h1_eta4")
    h2_eta5 = h2_dummy.Clone("h1_eta5")
    h2_eta6 = h2_dummy.Clone("h1_eta6")

    pT_hists = [h1_pT1, h1_pT2, h1_pT3, h1_pT4, h1_pT5]
    eta_hists = [h2_eta1, h2_eta2, h2_eta3, h2_eta4, h2_eta5, h2_eta6]
    h1_pT1.SetLineColor(8);h1_pT1.SetMarkerColor(8);h1_pT1.SetMarkerStyle(20);
    h1_pT2.SetLineColor(3);h1_pT2.SetMarkerColor(3);h1_pT2.SetMarkerStyle(20);
    h1_pT3.SetLineColor(4);h1_pT3.SetMarkerColor(4);h1_pT3.SetMarkerStyle(20);
    h1_pT4.SetLineColor(6);h1_pT4.SetMarkerColor(6);h1_pT4.SetMarkerStyle(20);
    h1_pT5.SetLineColor(7);h1_pT5.SetMarkerColor(7);h1_pT5.SetMarkerStyle(20);
    
    h2_eta1.SetLineColor(2);h2_eta1.SetMarkerColor(2);h2_eta1.SetMarkerStyle(20);
    h2_eta2.SetLineColor(4);h2_eta2.SetMarkerColor(4);h2_eta2.SetMarkerStyle(20);
    h2_eta3.SetLineColor(6);h2_eta3.SetMarkerColor(6);h2_eta3.SetMarkerStyle(20);
    h2_eta4.SetLineColor(7);h2_eta4.SetMarkerColor(7);h2_eta4.SetMarkerStyle(20);
    h2_eta5.SetLineColor(8);h2_eta5.SetMarkerColor(8);h2_eta5.SetMarkerStyle(20);
    h2_eta6.SetLineColor(9);h2_eta6.SetMarkerColor(9);h2_eta6.SetMarkerStyle(20);


    c, pad= createCanvasPads()
    hist = infile.Get("ss_pt_eta_0")

    hist_os1 = infile.Get("os_pt_eta_0")
    hist_os2 = infile.Get("os_pt_eta_1")
    hist_ss1 = infile.Get("ss_pt_eta_0")
    hist_ss2 = infile.Get("ss_pt_eta_1")

    # hist_osd1 = infile2.Get("os_pt_eta_0")
    # hist_osd2 = infile2.Get("os_pt_eta_1")
    # hist_ssd1 = infile2.Get("ss_pt_eta_0")
    # hist_ssd2 = infile2.Get("ss_pt_eta_1")
    # hist_ose1 = infile3.Get("os_pt_eta_0")
    # hist_ose2 = infile3.Get("os_pt_eta_1")
    # hist_sse1 = infile3.Get("ss_pt_eta_0")
    # hist_sse2 = infile3.Get("ss_pt_eta_1")


    hist_os = hist_os1.Clone("os_pt_eta_0 + os_pt_eta_1")
    hist_os.Add(hist_os2)
    hist_ss = hist_ss1.Clone("ss_pt_eta_0 + ss_pt_eta_1")
    hist_ss.Add(hist_ss2)

    # hist_osd = hist_osd1.Clone("os_pt_eta_0 + os_pt_eta_1")
    # hist_osd.Add(hist_osd2)
    # hist_ssd = hist_ssd1.Clone("ss_pt_eta_0 + ss_pt_eta_1")
    # hist_ssd.Add(hist_ssd2)
    # hist_ose = hist_ose1.Clone("os_pt_eta_0 + os_pt_eta_1")
    # hist_ose.Add(hist_ose2)
    # hist_sse = hist_sse1.Clone("ss_pt_eta_0 + ss_pt_eta_1")
    # hist_sse.Add(hist_sse2)

    # hist_os.Add(hist_osd)
    # hist_os.Add(hist_ose)
    # hist_ss.Add(hist_ssd)
    # hist_ss.Add(hist_sse)
    closure_hist = hist_os.Clone("diff")
 
    for j in range (1,pT_bins+1):
        for i in range(1,eta_bins+1):
            closure_hist.SetBinContent(i,j, abs(hist_os.GetBinContent(i,j) - hist_ss.GetBinContent(i,j) ))
            # print("os", i,j, hist_os1.GetBinContent(i,j), hist_os2.GetBinContent(i,j),  hist_os.GetBinContent(i,j) )
            # print("ss", i,j, hist_ss1.GetBinContent(i,j), hist_ss2.GetBinContent(i,j),  hist_ss.GetBinContent(i,j) )
            # print("df", i,j, hist.GetBinContent(i,j))

    closure_hist.Divide(hist_ss)

    for j in range (1,pT_bins+1):
        for i in range(1,eta_bins+1):

            # print(i,j, hist.GetBinContent(i,j), bin60_err[j-1+pT_bins*(i-1)], bin60[j-1+pT_bins*(i-1)])
            if Type == "fit": 
                hist.SetBinContent(i,j, bin60_sigma4_err[j-1+pT_bins*(i-1)]/bin60_sigma4[j-1+pT_bins*(i-1)])
            elif Type == "fcn":
                hist.SetBinContent(i,j, abs(bin60_sigma4_gauss[j-1+pT_bins*(i-1)] - bin60_sigma4[j-1+pT_bins*(i-1)])/bin60_sigma4[j-1+pT_bins*(i-1)])
            elif Type == "width":
                hist.SetBinContent(i,j, abs(bin60_sigma5[j-1+pT_bins*(i-1)] - bin60_sigma3[j-1+pT_bins*(i-1)])/bin60_sigma4[j-1+pT_bins*(i-1)])
            elif Type == "total":
                # fcn_unc = abs(bin60_gauss[j-1+pT_bins*(i-1)] - bin60[j-1+pT_bins*(i-1)])/bin60[j-1+pT_bins*(i-1)]
                width_unc = abs(bin60_sigma5[j-1+pT_bins*(i-1)] - bin60_sigma3[j-1+pT_bins*(i-1)])/bin60_sigma4[j-1+pT_bins*(i-1)]
                fit_unc = bin60_sigma4_err[j-1+pT_bins*(i-1)]/bin60_sigma4[j-1+pT_bins*(i-1)]
                closure_unc = closure_hist.GetBinContent(i,j)
                total = np.sqrt(width_unc*width_unc+ fit_unc*fit_unc+ closure_unc*closure_unc)
                # print(width_unc, closure_unc, fit_unc, fcn_unc, total)
                hist.SetBinContent(i,j,total)
                pT_hists[j-1].SetBinContent(i,bin60_sigma4[pT_bins*(i-1)+j-1])
                pT_hists[j-1].SetBinError(i,total*bin60_sigma4[pT_bins*(i-1)+j-1])
                eta_hists[i-1].SetBinContent(j,bin60_sigma4[pT_bins*(i-1)+j-1])
                eta_hists[i-1].SetBinError(j,total*bin60_sigma4[pT_bins*(i-1)+j-1])
                outhist.SetBinContent(i,j,bin60_sigma4[pT_bins*(i-1)+j-1])
                outhist.SetBinError(i,j,total)

    if Type == "closure":
        hist = closure_hist
    hist.SetStats(0)

    c.cd()

    pad.SetLogy()
    pad.Draw()

    pad.cd()
    root.gStyle.SetPaintTextFormat("4.4f");
    # hist.Draw("text same")
    # Change pad margins to allow space for z-axis colour bar and for ATLAS label

    # Set axis titles
    hist.GetXaxis().SetTitle("|#eta|")
    hist.GetYaxis().SetTitle("p_{T} [GeV]") 
    hist.GetZaxis().SetTitle("#Delta QmisID/QmisID")
    hist.SetMarkerSize(1.8)
    print(hist.GetBinContent(0,1))
    # ax.set_ylabel("p_{T} [GeV]")
    # ax.set_zlabel("QmisID", titleoffset=1.2)
    # ax.set_yscale("log")
    # # Add the ATLAS Label
    # aplt.atlas_label(ax.pad.GetLeftMargin(), 0.97, text="Internal", align=13)
    # ax.text(1 - ax.pad.GetRightMargin(), 0.97, "#sqrt{s} = 13 TeV, 139 fb^{-1}", size=22, align=33)

    hist.Draw("colz text same")
    print("here yes")
    # Save the plot as a PDF
    c.SaveAs(outPath+"bin60_4sigma_"+Type+"_syst.png")

    # etaaxis, gPad= createCanvasPads()
    if (Type =="total"):
        etaaxis = TCanvas("can","",900,700);
        gPad = TPad("pad1", "", 0, 0, 1, 1.0)
        
        etaaxis.SetLogy()
        gPad.SetLogy()
       
        lg = TLegend(0.65,0.1,0.85,0.4,"")
       
        lg.SetBorderSize(0)
        lg.SetFillStyle(0)
        
        for i in range (0, pT_bins):
            lg.AddEntry(pT_hists[i],"pT ["+str(pTBins[i])+","+str(pTBins[i+1])+"] GeV")
        h1_dummy.Draw()
        lg.Draw("same")
        for i in range (0, pT_bins):
            pT_hists[i].Draw("lp same")
            pT_hists[i].Write()
        
        etaaxis.Write()
        etaaxis.SaveAs(outPath+"misID_totaluncs_etabins.pdf")
        etaaxis.SaveAs(outPath+"misID_totaluncs_etabins.png")
        pTaxis = TCanvas("Pcanvas","",900,700);
        g2Pad = TPad("pad2","", 0, 0, 1, 1.0)
        
        pTaxis.SetLogy()
        pTaxis.SetLogx()
        g2Pad.SetLogy()
        g2Pad.SetLogx()
       
        lg2 = TLegend(0.65,0.1,0.85,0.4,"")
       
        lg2.SetBorderSize(0)
        lg2.SetFillStyle(0)
        
        for i in range (0, eta_bins):
            lg2.AddEntry(eta_hists[i],"#eta ["+str(etaBins[i])+","+str(etaBins[i+1])+"]")
        h2_dummy.Draw()
        lg.Draw("same")
        for i in range (0, eta_bins):
            eta_hists[i].Draw("lp same")
            eta_hists[i].Write()
        
        pTaxis.Write()
        pTaxis.SaveAs(outPath+"misID_totaluncs_pTbins.pdf")
        pTaxis.SaveAs(outPath+"misID_totaluncs_pTbins.png")
        outhist.SaveAs(outPath+"misID_totaluncs_pTbins.root")


if __name__ == '__main__':
    root.gROOT.SetBatch()
    outPath = "/eos/user/s/ssindhu/4tops/plots/approved_binning/signal/"
    # closure_uncs(outPath)
    uncs(outPath, "closure")
    uncs(outPath, "width")
    uncs(outPath, "fit")
    # uncs(outPath, "fcn")
    uncs(outPath, "total")









